# -*- coding: utf-8 -*-

"""
    falconideapiv10.models.email_details

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""


class EmailDetails(object):

    """Implementation of the 'email_details' model.

    TODO: type model description here.

    Attributes:
        fromname (string): TODO: type description here.
        subject (string): TODO: type description here.
        mfrom (string): TODO: type description here.
        replytoid (string): TODO: type description here.
        tags (string): TODO: type description here.
        content (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fromname" : "fromname",
        "subject" : "subject",
        "mfrom" : "from",
        "replytoid" : "replytoid",
        "tags" : "tags",
        "content" : "content"
    }

    def __init__(self,
                 fromname=None,
                 subject=None,
                 mfrom=None,
                 replytoid=None,
                 tags=None,
                 content=None):
        """Constructor for the EmailDetails class"""

        # Initialize members of the class
        self.fromname = fromname
        self.subject = subject
        self.mfrom = mfrom
        self.replytoid = replytoid
        self.tags = tags
        self.content = content


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        fromname = dictionary.get("fromname")
        subject = dictionary.get("subject")
        mfrom = dictionary.get("from")
        replytoid = dictionary.get("replytoid")
        tags = dictionary.get("tags")
        content = dictionary.get("content")

        # Return an object of this model
        return cls(fromname,
                   subject,
                   mfrom,
                   replytoid,
                   tags,
                   content)


